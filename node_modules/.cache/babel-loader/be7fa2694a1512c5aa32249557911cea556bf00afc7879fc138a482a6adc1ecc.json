{"ast":null,"code":"// todoSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst englishTasks = [{\n  title: \"Complete weekly report\",\n  description: \"Prepare and submit the weekly progress report\"\n}, {\n  title: \"Schedule team meeting\",\n  description: \"Arrange team meeting for project updates\"\n}, {\n  title: \"Update documentation\",\n  description: \"Review and update project documentation\"\n}, {\n  title: \"Review pull requests\",\n  description: \"Review pending code pull requests\"\n}, {\n  title: \"System backup\",\n  description: \"Perform weekly system backup\"\n}, {\n  title: \"Bug fixes\",\n  description: \"Address reported system bugs\"\n}, {\n  title: \"User testing\",\n  description: \"Conduct user testing for new features\"\n}, {\n  title: \"Performance review\",\n  description: \"Complete quarterly performance reviews\"\n}];\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos');\n  const data = await response.json();\n\n  // Transform the data to include English content\n  return data.slice(0, 10).map((todo, index) => ({\n    ...todo,\n    title: englishTasks[index].title,\n    description: englishTasks[index].description\n  }));\n});\nexport const addTodo = createAsyncThunk('todos/addTodo', async todo => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(todo)\n  });\n  const data = await response.json();\n  return {\n    ...data,\n    title: todo.title,\n    description: todo.description\n  };\n});\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async ({\n  id,\n  updates\n}) => {\n  const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updates)\n  });\n  const data = await response.json();\n  return {\n    ...data,\n    ...updates\n  };\n});\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchTodos.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addTodo.fulfilled, (state, action) => {\n      state.items.push(action.payload);\n    }).addCase(updateTodo.fulfilled, (state, action) => {\n      const index = state.items.findIndex(todo => todo.id === action.payload.id);\n      if (index !== -1) {\n        state.items[index] = action.payload;\n      }\n    });\n  }\n});\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","englishTasks","title","description","fetchTodos","response","fetch","data","json","slice","map","todo","index","addTodo","method","headers","body","JSON","stringify","updateTodo","id","updates","todoSlice","name","initialState","items","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","findIndex","reducer"],"sources":["C:/Users/Vansh Maheshwari/Desktop/internship_submission/bytive/to-do-list/src/store/todoSlice.js"],"sourcesContent":["// todoSlice.js\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst englishTasks = [\r\n  { title: \"Complete weekly report\", description: \"Prepare and submit the weekly progress report\" },\r\n  { title: \"Schedule team meeting\", description: \"Arrange team meeting for project updates\" },\r\n  { title: \"Update documentation\", description: \"Review and update project documentation\" },\r\n  { title: \"Review pull requests\", description: \"Review pending code pull requests\" },\r\n\r\n  { title: \"System backup\", description: \"Perform weekly system backup\" },\r\n  { title: \"Bug fixes\", description: \"Address reported system bugs\" },\r\n  { title: \"User testing\", description: \"Conduct user testing for new features\" },\r\n  { title: \"Performance review\", description: \"Complete quarterly performance reviews\" }\r\n];\r\n\r\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos');\r\n  const data = await response.json();\r\n  \r\n  // Transform the data to include English content\r\n  return data.slice(0, 10).map((todo, index) => ({\r\n    ...todo,\r\n    title: englishTasks[index].title,\r\n    description: englishTasks[index].description\r\n  }));\r\n});\r\n\r\nexport const addTodo = createAsyncThunk('todos/addTodo', async (todo) => {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(todo),\r\n  });\r\n  const data = await response.json();\r\n  return {\r\n    ...data,\r\n    title: todo.title,\r\n    description: todo.description\r\n  };\r\n});\r\n\r\nexport const updateTodo = createAsyncThunk('todos/updateTodo', async ({ id, updates }) => {\r\n  const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(updates),\r\n  });\r\n  const data = await response.json();\r\n  return {\r\n    ...data,\r\n    ...updates\r\n  };\r\n});\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todos',\r\n  initialState: {\r\n    items: [],\r\n    status: 'idle',\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchTodos.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchTodos.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.items = action.payload;\r\n      })\r\n      .addCase(fetchTodos.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(addTodo.fulfilled, (state, action) => {\r\n        state.items.push(action.payload);\r\n      })\r\n      .addCase(updateTodo.fulfilled, (state, action) => {\r\n        const index = state.items.findIndex(todo => todo.id === action.payload.id);\r\n        if (index !== -1) {\r\n          state.items[index] = action.payload;\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport default todoSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG,CACnB;EAAEC,KAAK,EAAE,wBAAwB;EAAEC,WAAW,EAAE;AAAgD,CAAC,EACjG;EAAED,KAAK,EAAE,uBAAuB;EAAEC,WAAW,EAAE;AAA2C,CAAC,EAC3F;EAAED,KAAK,EAAE,sBAAsB;EAAEC,WAAW,EAAE;AAA0C,CAAC,EACzF;EAAED,KAAK,EAAE,sBAAsB;EAAEC,WAAW,EAAE;AAAoC,CAAC,EAEnF;EAAED,KAAK,EAAE,eAAe;EAAEC,WAAW,EAAE;AAA+B,CAAC,EACvE;EAAED,KAAK,EAAE,WAAW;EAAEC,WAAW,EAAE;AAA+B,CAAC,EACnE;EAAED,KAAK,EAAE,cAAc;EAAEC,WAAW,EAAE;AAAwC,CAAC,EAC/E;EAAED,KAAK,EAAE,oBAAoB;EAAEC,WAAW,EAAE;AAAyC,CAAC,CACvF;AAED,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;EAElC;EACA,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;IAC7C,GAAGD,IAAI;IACPT,KAAK,EAAED,YAAY,CAACW,KAAK,CAAC,CAACV,KAAK;IAChCC,WAAW,EAAEF,YAAY,CAACW,KAAK,CAAC,CAACT;EACnC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMU,OAAO,GAAGb,gBAAgB,CAAC,eAAe,EAAE,MAAOW,IAAI,IAAK;EACvE,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IACzEQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EACF,MAAMJ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAO;IACL,GAAGD,IAAI;IACPL,KAAK,EAAES,IAAI,CAACT,KAAK;IACjBC,WAAW,EAAEQ,IAAI,CAACR;EACpB,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAMgB,UAAU,GAAGnB,gBAAgB,CAAC,kBAAkB,EAAE,OAAO;EAAEoB,EAAE;EAAEC;AAAQ,CAAC,KAAK;EACxF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8Cc,EAAE,EAAE,EAAE;IAC/EN,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,OAAO;EAC9B,CAAC,CAAC;EACF,MAAMd,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAO;IACL,GAAGD,IAAI;IACP,GAAGc;EACL,CAAC;AACH,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGvB,WAAW,CAAC;EAC5BwB,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC3B,UAAU,CAAC4B,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAAC3B,UAAU,CAAC8B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAAC3B,UAAU,CAACiC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAAClB,OAAO,CAACqB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACR,KAAK,CAACc,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IAClC,CAAC,CAAC,CACDL,OAAO,CAACZ,UAAU,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChD,MAAMvB,KAAK,GAAGqB,KAAK,CAACR,KAAK,CAACe,SAAS,CAAC7B,IAAI,IAAIA,IAAI,CAACS,EAAE,KAAKe,MAAM,CAACC,OAAO,CAAChB,EAAE,CAAC;MAC1E,IAAIR,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBqB,KAAK,CAACR,KAAK,CAACb,KAAK,CAAC,GAAGuB,MAAM,CAACC,OAAO;MACrC;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAed,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}